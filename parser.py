import requests
from bs4 import BeautifulSoup
import time
import json
import re
import asyncio
from telegram import Bot
from telegram.error import TelegramError



MIN_PRICE = 35000
MAX_PRICE = 45000

# Telegram
TELEGRAM_BOT_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN_HERE"
CHAT_ID = "YOUR_CHAT_ID_HERE"

CHECK_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç

# ========== –§–£–ù–ö–¶–ò–ò ==========

def get_avito_url():
    """URL –¥–ª—è –¢–û–õ–¨–ö–û 2-–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö"""
    return "https://www.avito.ru/kazan/kvartiry/sdam/na_dlitelnyy_srok/2-komnatnye-ASgBAgICA0SSA8gQ8AeQUswIkFk?pmin=35000&pmax=45000"


def is_two_room(title):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç 2-–∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É"""
    title_lower = title.lower()

    patterns = [
        r'2-–∫\.',
        r'2–∫\.',
        r'2-–∫–æ–º–Ω',
        r'2 –∫–æ–º–Ω',
        r'–¥–≤—É—Ö–∫–æ–º–Ω',
        r'–¥–≤—É—à–∫'
    ]

    for pattern in patterns:
        if re.search(pattern, title_lower):
            return True

    if re.search(r'[13]-–∫\.', title_lower):
        return False
    if '—Å—Ç—É–¥–∏—è' in title_lower:
        return False

    return False


def get_page_content(url):
    """–ü–æ–ª—É—á–∞–µ—Ç HTML"""
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'text/html,application/xhtml+xml',
        'Accept-Language': 'ru-RU,ru;q=0.9',
    }

    try:
        response = requests.get(url, headers=headers, timeout=15)

        if response.status_code == 200:
            return response.text
        elif response.status_code == 429:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ 429: –ñ–¥–µ–º 60 —Å–µ–∫...")
            time.sleep(60)
            return None
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {response.status_code}")
            return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


def parse_apartments(html_content):
    """–ü–∞—Ä—Å–∏—Ç –¢–û–õ–¨–ö–û 2-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ"""
    if not html_content:
        return []

    soup = BeautifulSoup(html_content, 'html.parser')
    apartments = []

    json_ld_scripts = soup.find_all('script', {'type': 'application/ld+json'})

    for script in json_ld_scripts:
        try:
            data = json.loads(script.string)

            if '@graph' in data:
                for item in data['@graph']:
                    if item.get('@type') == 'Product' and 'offers' in item:
                        aggregate = item['offers']
                        if 'offers' in aggregate:
                            for offer in aggregate['offers']:
                                try:
                                    title = offer.get('name', '')
                                    price_str = offer.get('price', '0')
                                    price = int(price_str) if price_str else 0
                                    url = offer.get('url', '')

                                    if is_two_room(title):
                                        if MIN_PRICE <= price <= MAX_PRICE:
                                            apartments.append({
                                                'title': title,
                                                'price': price,
                                                'link': url
                                            })
                                            print(f"‚úÖ {title} - {price:,} ‚ÇΩ")

                                except (KeyError, ValueError):
                                    continue

        except json.JSONDecodeError:
            continue

    print(f"üìä –ù–∞–π–¥–µ–Ω–æ 2-–∫–æ–º–Ω–∞—Ç–Ω—ã—Ö: {len(apartments)}")
    return apartments


async def send_telegram_message(bot, apartments):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (async)"""
    if not apartments or not bot:
        return

    for apt in apartments:
        message = f"""
üè† <b>–ù–æ–≤–∞—è 2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è!</b>

üí∞ {apt['price']:,} ‚ÇΩ/–º–µ—Å
üìù {apt['title']}

üîó <a href="{apt['link']}">–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>
        """

        try:
            await bot.send_message(
                chat_id=CHAT_ID,
                text=message.strip(),
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            await asyncio.sleep(1)
        except TelegramError as e:
            print(f"‚ùå Telegram: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (async)"""
    print("=" * 60)
    print("üöÄ Avito Parser ‚Äî –¢–û–õ–¨–ö–û 2-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã")
    print(f"üí∞ –¶–µ–Ω–∞: {MIN_PRICE:,} - {MAX_PRICE:,} ‚ÇΩ")
    print(f"‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} —Å–µ–∫")
    print("=" * 60)
    print()

    # Telegram
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    try:
        await bot.get_me()
        print("‚úÖ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω\n")
    except:
        print("‚ö†Ô∏è Telegram –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n")
        bot = None

    seen_links = set()

    try:
        while True:
            print(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ {time.strftime('%H:%M:%S')}")

            html = get_page_content(get_avito_url())

            if html:
                apartments = parse_apartments(html)

                new_apartments = [
                    apt for apt in apartments
                    if apt['link'] not in seen_links
                ]

                if new_apartments:
                    print(f"üÜï –ù–æ–≤—ã—Ö: {len(new_apartments)}")

                    for apt in new_apartments:
                        seen_links.add(apt['link'])

                    if bot:
                        await send_telegram_message(bot, new_apartments)
                else:
                    print(f"üìã –í—Å–µ–≥–æ: {len(apartments)}, –Ω–æ–≤—ã—Ö: 0")

            print(f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL} —Å–µ–∫")
            print("=" * 60)
            print()
            await asyncio.sleep(CHECK_INTERVAL)

    except KeyboardInterrupt:
        print("\n‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞")


if __name__ == "__main__":
    asyncio.run(main())
